[
["setup.html", "Calculating ED Hydro Parameter Priors Chapter 1 Setup", " Calculating ED Hydro Parameter Priors Betsy Cowdery 2019-03-12 Chapter 1 Setup suppressPackageStartupMessages(library(ED.Hydro.Helpers)) suppressPackageStartupMessages(library(rlang)) suppressPackageStartupMessages(library(knitr)) options(digits = 10) knitr::include_graphics(&quot;ED_HYDRO.png&quot;) bety &lt;- betyConnect(&quot;/fs/data3/ecowdery/pecan/web/config.php&quot;) PFT3_defaults_history &lt;- &quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot; stats &lt;- c(&quot;theor.min&quot;, &quot;low.025&quot;, &quot;low.25&quot;, &quot;mean&quot;, &quot;upp.75&quot;, &quot;upp.975&quot;, &quot;theor.max&quot;) priors &lt;- prior_load_data(download = FALSE, subset = TRUE) ## [1] &quot;leaf_psi_tlp&quot; &quot;wood_psi_tlp&quot; &quot;rwc_tlp_wood&quot; &quot;leaf_density&quot; ## [5] &quot;leaf_psi_min&quot; &quot;leaf_water_cap&quot; &quot;wood_psi_min&quot; &quot;wood_water_cap&quot; kable(priors) ED_name Christoffersen_name BETY_variable_id BETY_prior_id ED_units Christoffersen_units theor.min low.025 low.25 mean upp.75 upp.975 theor.max wood_Kexp avuln_node 1000000291 1000000361 unitless unitless 1e-01 1.00 10.0 NA 100 200.00 NA leaf_elastic_mod epsil_node 1000000294 1000000387 MPa MPa 1e+00 5.00 NA 20.00 NA 50.00 NA wood_elastic_mod epsil_node NA NA MPa MPa 1e+00 5.00 NA 20.00 NA 50.00 NA wood_Kmax kmax_node 1000000290 1000000357 kg H2O / m / s kg m-1 s-1 MPa-1 1e-02 0.10 0.5 NA 5 10.00 NA wood_psi50 p50_node 1000000289 1000000360 m MPa 1e-01 0.50 1.0 NA 4 6.00 NA leaf_psi_osmotic pinot_node 1000000295 1000000388 m MPa 1e-01 0.50 NA 2.00 NA 4.00 NA wood_psi_osmotic pinot_node 1000000298 NA m MPa 1e-01 0.50 NA 2.00 NA 4.00 NA leaf_psi_tlp pitlp_node 1000000284 1000000384 m MPa 5e-01 NA NA NA NA NA 6.00 wood_psi_tlp pitlp_node 1000000301 NA m MPa 1e-01 NA NA NA NA NA NA rwc_tlp_wood rwctlp_node 1000000296 NA unitless unitless NA NA NA NA NA NA NA leaf_water_sat thetas_node 1000000285 1000000358 kg H2O/kg biomass kg kg-1 1e-02 0.40 NA 0.65 NA 0.88 0.99 wood_water_sat thetas_node 1000000286 1000000359 kg H2O/kg biomass kg kg-1 5e-02 0.35 NA NA NA 0.80 0.90 leaf_density NA NA NA kg/m3 NA 1e-07 NA NA NA NA NA 2000.00 leaf_psi_min NA 1000000299 1000000392 m NA 1e-01 NA NA NA NA NA 700.00 leaf_water_cap NA 1000000287 1000000390 kg H2O/kg biomass/m NA 1e-07 NA NA NA NA NA NA wood_psi_min NA 1000000300 NA m NA 1e-01 NA NA NA NA NA NA wood_water_cap NA 1000000288 1000000391 kg H2O/kg biomass/m NA 1e-07 NA NA NA NA NA NA load(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/prior_calculations/prior_data/accepted_dists.Rdata&quot;) "],
["starting-parameters.html", "Chapter 2 Starting Parameters 2.1 Liquid water density 2.2 Gravity 2.3 Conversion from MPa to m 2.4 Wood density 2.5 Specific Leaf Area (SLA)", " Chapter 2 Starting Parameters 2.1 Liquid water density ED variable name : wdns ED variable units: kg/m3 wdns &lt;- 1.000e3 # Liquid water density [kg/m3] 2.2 Gravity ED variable name : grav ED variable units: m/s2 grav &lt;- 9.80665 # Gravity acceleration [m/s2] 2.3 Conversion from MPa to m ED variable name : MPa2m MPa2m &lt;- wdns / grav 2.4 Wood density ED variable name : rho ED units: g cm-3 Note! Leaf density is calculated in kg cm-3 because that makes perfect sense … ED variable id: 1000000055 FATES varaiable name: WD In the database, wood_density is unitless. So I’m assuming it can be directly mapped to our wood_density as such: \\[\\frac{WD (gcm^{-2})}{\\rho_w(gcm^{-2})} * \\rho_w(gcm^{-2}) = \\frac{WD (gcm^{-2})}{1(gcm^{-2})} * 1(gcm^{-2})\\] wood_density_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(variable_id == 1000000055) %&gt;% filter(id == 1000000281) %&gt;% collect() wood_density_prior &lt;- rdistn(wood_density_fit) default_wood_density &lt;- get_ED_default(PFT3_defaults_history, &quot;rho&quot;) plot(density(wood_density_prior), main = &quot;Wood density prior&quot;) abline(v = default_wood_density, col = &quot;blue&quot;, lwd = 2) legend(&quot;topright&quot;,legend=c(&quot;Prior&quot;,&quot;ED PFT 3 Default&quot;,&quot;Data&quot;), col=c(&quot;black&quot;, &quot;blue&quot;, &quot;green&quot;), lwd=2) 2.5 Specific Leaf Area (SLA) And subsequently \\(LMA = (1/SLA)\\) ED variable name : SLA ED variable id: 15 SLA_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(variable_id == 15) %&gt;% filter(id == 142) %&gt;% collect() # In this case, we are using prior_id = 142, this was chosen by someone else and maybe we&#39;ll revisit SLA_prior &lt;- rdistn(SLA_fit) plot(density(SLA_prior), main = &quot;SLA prior&quot;) abline(v = get_ED_default(PFT3_defaults_history, &quot;SLA&quot;), col = &quot;blue&quot;, lwd = 2) legend(&quot;topright&quot;,legend=c(&quot;Prior&quot;,&quot;ED PFT 3 Default&quot;,&quot;Data&quot;), col=c(&quot;black&quot;, &quot;blue&quot;, &quot;green&quot;), lwd=2) "],
["key-leaf-traits.html", "Chapter 3 Key Leaf Traits 3.1 Leaf psi osmotic 3.2 Leaf bulk elastic modulus 3.3 Density of leaf tissue 3.4 Leaf water content at saturation 3.5 leaf_psi_tlp 3.6 leaf_water_cap 3.7 leaf_psi_min", " Chapter 3 Key Leaf Traits 3.1 Leaf psi osmotic ED variable name : leaf_psi_osmotic FATES varaiable name: pinot_node (leaf) 3.1.1 Prior data provided by Brad Christoffersen: YES 3.1.2 Conversion MPa to m i &lt;- which(priors$ED_name == &quot;leaf_psi_osmotic&quot;) prior_in &lt;- priors[i, stats] * MPa2m myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) myfit$score$dist[which.min(myfit$score$RMSE)] ## [1] &quot;weibull&quot; variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_psi_osmotic_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000388 already exists. Parameters look the same. Old: weibull(2.4100, 237.4600) New: weibull(2.4100, 237.4600)&quot; leaf_psi_osmotic_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_psi_osmotic_prior_id) %&gt;% collect() leaf_psi_osmotic_prior &lt;- -rdistn(leaf_psi_osmotic_fit) # NOTE: Need to convert to m from -m leaf_psi_osmotic_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_psi_osmotic&quot;) plot(density(leaf_psi_osmotic_prior), main = &quot;leaf_psi_osmotic prior&quot;) abline(v = get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_psi_osmotic&quot;), col = &quot;blue&quot;, lwd = 2) abline(v = quantile(leaf_psi_osmotic_prior, c(.025, .975)), lty = 2) legend(&quot;topleft&quot;,legend=c(&quot;Prior&quot;, &quot;95% CI&quot;, &quot;ED PFT 3 Default&quot;), col=c(&quot;black&quot;, &quot;black&quot;,&quot;blue&quot;), lwd = c(2,1,2), lty = c(1,2,1)) prior_plot(prior = leaf_psi_osmotic_prior, q = c(0,1), plot_default = leaf_psi_osmotic_default, title = sprintf(&quot; (leaf_psi_osmotic): %s&quot;, leaf_psi_osmotic_fit$distn), type = &quot;data&quot;) Additional thoughts: All psi variables must be negative. However, the normal distribution fits the prior data the best and the 95% CI falls below 0. So for now I’m going to stick with the normal distribution. 3.2 Leaf bulk elastic modulus ED variable name : leaf_elastic_mod ED variable units: MPa Note! This is the only case in which MPa is used instead of m! FATES varaiable name: epsil_node (leaf) 3.2.1 Prior data provided by Brad Christoffersen: YES 3.2.2 Conversion None! i &lt;- which(priors$ED_name == &quot;leaf_elastic_mod&quot;) prior_in &lt;- priors[i,] myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_elastic_mod_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000387 already exists. Parameters look the same. Old: gamma(3.4400, 0.1600) New: gamma(3.4400, 0.1600)&quot; leaf_elastic_mod_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_elastic_mod_id) %&gt;% collect() leaf_elastic_mod_prior &lt;- rdistn(leaf_elastic_mod_fit) leaf_elastic_mod_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_elastic_mod&quot;) # plot(density(leaf_elastic_mod_prior), main = &quot;leaf_elastic_mod prior&quot;) # abline(v = get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_elastic_mod&quot;), col = &quot;blue&quot;, lwd = 2) # legend(&quot;topright&quot;,legend=c(&quot;Prior&quot;,&quot;ED PFT 3 Default&quot;), col=c(&quot;black&quot;, &quot;blue&quot;), lwd=2) prior_plot(prior = leaf_elastic_mod_prior, q = c(0,.995), plot_default = leaf_elastic_mod_default, title = sprintf(&quot;Leaf bulk elastic modulus (leaf_elastic_mod): %s&quot;, leaf_elastic_mod_fit$distn), type = &quot;data&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). 3.3 Density of leaf tissue ED variable name : leaf_density ED units: kg m-3 leaf_density_sample &lt;- (leaf_elastic_mod_prior - 2.03) / 25.4 * 1.e3 # Add in the max an min from the priors table i &lt;- which(priors$ED_name == &quot;leaf_density&quot;) prior_in &lt;- priors[i,] # Note here I don&#39;t need to do any units conversion prior_in &lt;- prior_add_samp_data(prior_in, samp = leaf_density_sample) prior_in[,stats] ## # A tibble: 1 x 7 ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.0000001 121. 433. 686. 1016. 1880. 2000 myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) myfit$score$dist[which.min(myfit$score$RMSE)] ## [1] &quot;weibull&quot; variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == &quot;leaf_density&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_density_default &lt;- (get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_elastic_mod&quot;) - 2.03) / 25.4 * 1.e3 leaf_density_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000396 already exists. Parameters look different. Old: weibull(1.8300, 845.8900) New: weibull(1.8300, 846.6400)&quot; leaf_density_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_density_id) %&gt;% collect() leaf_density_prior &lt;- rdistn(leaf_density_fit) leaf_density_prior_1 &lt;- leaf_density_prior leaf_density_prior_2 &lt;- rlnorm(100000, 6.51, .59) plot(density(leaf_density_prior_1), main = &quot;leaf_density prior&quot;, xlim = c(0,4000)) lines(density(leaf_density_prior_2), col = &quot;red&quot;) abline(v = leaf_density_default, col = &quot;blue&quot;, lwd = 2) legend(&quot;topright&quot;, legend = c(&quot;Weibull&quot;, &quot;Log Normal&quot;, &quot;ED PFT 3 Default&quot;), col = c(&quot;black&quot;, &quot;red&quot;, &quot;blue&quot;), lwd = 2) prior_plot(prior = leaf_density_prior, q = c(0,.995), plot_default = leaf_density_default, title = sprintf(&quot;Leaf density (leaf_density): %s&quot;, leaf_density_fit$distn), type = &quot;equation&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). So in this case, the log normal distribution fits the prior data better (with a lower RMSE) but the normal distribution fits the default values better. I’m not really sure which is best … Down below I’ll perform the next set of calculations using both the log normal and normal distributions. At the end of the day, I think the distribution that fits better with the prior data (ie log normal) produces better looking results. Which is nice because I’d like to go by default and always choose the model with the better fit to the prior data. 3.4 Leaf water content at saturation ED variable name : leaf_water_sat FATES varaiable name: thetas_node (leaf) 3.4.1 Prior data provided by Brad Christoffersen: YES 3.4.2 Conversion There are a couple ways to approach this: Either build a prior completely from other priors (ie using a prior for LMA and leaf_density) or try to do some sort of combination where we use the priovided prior data and the prior distribution for leaf_density. I am going to try doing both just to see how they differ. I am also going to calculate with both the normal and the log normal distribution for leaf density to see how it affects the final distribution. 3.4.3 Conversion The equations between the two are identical except that to get from Christoffersen to ED, must multiply by (water density)/(leaf density) # Following the equation in ED SLA_density &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;SLA&quot;) default_LMA &lt;- 1e3 * 2 / SLA_density # 1.e3 * C2B / SLA(ipft) leaf_water_sat_density &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_water_sat&quot;) leaf_water_sat_default_calc &lt;- (-2.32e4 / default_LMA + 782.) * (1. / (-0.21 * log(1.e4 / default_LMA) + 1.43) - 1.) / leaf_density_default c(leaf_water_sat_density, leaf_water_sat_default_calc) ## [1] 0.6342311502 0.6342311849 LMA_prior &lt;- 1e3 * 2 / SLA_prior # Should be analogous to Christoffersen because I&#39;m dividing by wdns instead of leaf_density leaf_water_sat_samp_1_1 &lt;- (-2.32e4 / LMA_prior + 782.) * (1. / (-0.21 * log(1.e4 / LMA_prior) + 1.43) - 1.) / leaf_density_prior_1 leaf_water_sat_samp_1_2 &lt;- (-2.32e4 / LMA_prior + 782.) * (1. / (-0.21 * log(1.e4 / LMA_prior) + 1.43) - 1.) / leaf_density_prior_2 prior_in_1_1 &lt;- data.frame(low.025 = quantile(leaf_water_sat_samp_1_1, c(.025), na.rm = TRUE), low.25 = quantile(leaf_water_sat_samp_1_1, c(.25), na.rm = TRUE), mean = quantile(leaf_water_sat_samp_1_1, c(.5), na.rm = TRUE), upp.75 = quantile(leaf_water_sat_samp_1_1, c(.75), na.rm = TRUE), upp.975 = quantile(leaf_water_sat_samp_1_1, c(.975), na.rm = TRUE)) myfit_1_1 &lt;- prior_get_fit(prior_in_1_1, accepted_dists, plot = FALSE) ## Warning: Unknown columns: `theor.min`, `theor.max` myfit_1_1$score$dist[which.min(myfit_1_1$score$RMSE)] ## [1] &quot;exp&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity leaf_water_sat_prior_1_1 &lt;- rexp(1000, myfit_1_1$dists$exp[1]) prior_in_1_2 &lt;- data.frame(low.025 = quantile(leaf_water_sat_samp_1_2, c(.025), na.rm = TRUE), low.25 = quantile(leaf_water_sat_samp_1_2, c(.25), na.rm = TRUE), mean = quantile(leaf_water_sat_samp_1_2, c(.5), na.rm = TRUE), upp.75 = quantile(leaf_water_sat_samp_1_2, c(.75), na.rm = TRUE), upp.975 = quantile(leaf_water_sat_samp_1_2, c(.975), na.rm = TRUE)) myfit_1_2 &lt;- prior_get_fit(prior_in_1_2, accepted_dists, plot = FALSE) ## Warning: Unknown columns: `theor.min`, `theor.max` myfit_1_2$score$dist[which.min(myfit_1_2$score$RMSE)] ## [1] &quot;lnorm&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity leaf_water_sat_prior_1_2 &lt;- rlnorm(1000, myfit_1_2$dists$lnorm[1], myfit_1_2$dists$lnorm[2]) # ggplot(data = data.frame(leaf_water_sat_prior_1_1, leaf_water_sat_prior_1_2)) + # geom_density(aes(x = leaf_water_sat_prior_1_1), color = &quot;red&quot;) + # geom_density(aes(x = leaf_water_sat_prior_1_2), color = &quot;blue&quot;) + # geom_vline(aes(xintercept = leaf_water_sat_density)) # Using the data i &lt;- which(priors$ED_name == &quot;leaf_water_sat&quot;) myfit_2 &lt;- prior_get_fit(priors[i,], accepted_dists, plot = FALSE) myfit_2$score$dist[which.min(myfit_2$score$RMSE)] ## [1] &quot;norm&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity leaf_water_sat_prior_2 &lt;- rnorm(1000, myfit_2$dists$norm[1], myfit_2$dists$norm[2]) calc_2_1 &lt;- leaf_water_sat_prior_2 * (wdns/(leaf_density_prior_1)) prior_in_2_1 &lt;- data.frame(low.025 = quantile(calc_2_1, c(.025), na.rm = TRUE), low.25 = quantile(calc_2_1, c(.25), na.rm = TRUE), mean = quantile(calc_2_1, c(.5), na.rm = TRUE), upp.75 = quantile(calc_2_1, c(.75), na.rm = TRUE), upp.975 = quantile(calc_2_1, c(.975), na.rm = TRUE)) myfit_2_1 &lt;- prior_get_fit(prior_in_2_1, accepted_dists, plot = FALSE) ## Warning: Unknown columns: `theor.min`, `theor.max` myfit_2_1$score$dist[which.min(myfit_2_1$score$RMSE)] ## [1] &quot;lnorm&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity leaf_water_sat_prior_2_1 &lt;- rlnorm(1000, myfit_2_1$dists$lnorm[1], myfit_2_1$dists$lnorm[2]) calc_2_2 &lt;- leaf_water_sat_prior_2 * (wdns/(leaf_density_prior_2)) prior_in_2_2 &lt;- data.frame(low.025 = quantile(calc_2_2, c(.025), na.rm = TRUE), low.25 = quantile(calc_2_2, c(.25), na.rm = TRUE), mean = quantile(calc_2_2, c(.5), na.rm = TRUE), upp.75 = quantile(calc_2_2, c(.75), na.rm = TRUE), upp.975 = quantile(calc_2_2, c(.975), na.rm = TRUE)) myfit_2_2 &lt;- prior_get_fit(prior_in_2_2, accepted_dists, plot = FALSE) ## Warning: Unknown columns: `theor.min`, `theor.max` myfit_2_2$score$dist[which.min(myfit_2_2$score$RMSE)] ## [1] &quot;lnorm&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity leaf_water_sat_prior_2_2 &lt;- rlnorm(1000, myfit_2_2$dists$lnorm[1], myfit_2_2$dists$lnorm[2]) df &lt;- data.frame(leaf_water_sat_prior_1_1, leaf_water_sat_prior_1_2, leaf_water_sat_prior_2_1, leaf_water_sat_prior_2_2) df2 &lt;- df %&gt;% gather(key = &quot;prior&quot;) %&gt;% mutate(leaf_dens_dist = case_when( prior == &quot;leaf_water_sat_prior_1_1&quot; ~ &quot;Weibull&quot;, prior == &quot;leaf_water_sat_prior_1_2&quot; ~ &quot;Log Normal&quot;, prior == &quot;leaf_water_sat_prior_2_1&quot; ~ &quot;Weibull&quot;, prior == &quot;leaf_water_sat_prior_2_2&quot; ~ &quot;Log Normal&quot; )) %&gt;% mutate(prior_or_data = case_when( prior == &quot;leaf_water_sat_prior_1_1&quot; ~ &quot;LMA_prior&quot;, prior == &quot;leaf_water_sat_prior_1_2&quot; ~ &quot;LMA_prior&quot;, prior == &quot;leaf_water_sat_prior_2_1&quot; ~ &quot;leaf_water_sat_prior_data&quot;, prior == &quot;leaf_water_sat_prior_2_2&quot; ~ &quot;leaf_water_sat_prior_data&quot; )) ggplot(data = df2) + geom_density(aes(x = value, color = prior_or_data, linetype = leaf_dens_dist)) + geom_vline(aes(xintercept = leaf_water_sat_density)) + geom_point(aes(x = .03, y = 0)) + geom_point(aes(x = 1.5, y = 0)) + geom_point(aes(x = 2, y = 0)) + xlim(-.25, 4) ## Warning: Removed 31 rows containing non-finite values (stat_density). From this pot, we can see that just using the equations in the ED code makes the distributions predict low values which is definitely a problem given that these values should not be zero and that the distribution underpredicts both in relation to the default value and the three values that Felicien gave me. Thus I would create the prior using the data provided by Brad. I am also comfortable with chooseing the best fit distribution for leaf_density which is the log normal distribution instead of trying to come up with a reason why we should make leaf density normal instead. In short: I choose leaf_water_sat_prior_2_2 i &lt;- which(priors$ED_name == &quot;leaf_water_sat&quot;) myfit_0 &lt;- prior_get_fit(priors[i,], accepted_dists, plot = FALSE) myfit_0$score$dist[which.min(myfit_0$score$RMSE)] ## [1] &quot;norm&quot; # I&#39;m skipping steps here just for the sake of time &amp; sanity leaf_water_sat_prior_0 &lt;- rnorm(100000, myfit_0$dists$norm[1], myfit_0$dists$norm[2]) leaf_water_sat_sample &lt;- leaf_water_sat_prior_0 * (wdns/(leaf_density_prior)) plot(density(leaf_water_sat_sample), main = &quot;leaf water sat sample without fitting&quot;) # In this case I&#39;m not using the function I built because here it wouldn&#39;t make sense. prior_in &lt;- data.frame(low.025 = quantile(leaf_water_sat_sample, c(.025), na.rm = TRUE), low.25 = quantile(leaf_water_sat_sample, c(.25), na.rm = TRUE), mean = quantile(leaf_water_sat_sample, c(.5), na.rm = TRUE), upp.75 = quantile(leaf_water_sat_sample, c(.75), na.rm = TRUE), upp.975 = quantile(leaf_water_sat_sample, c(.975), na.rm = TRUE)) myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) ## Warning: Unknown columns: `theor.min`, `theor.max` variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_water_sat_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000414 already exists. Parameters look the same. Old: lnorm(-0.0400, 0.6400) New: lnorm(-0.0400, 0.6400)&quot; leaf_water_sat_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_water_sat_prior_id) %&gt;% collect() leaf_water_sat_prior &lt;- rdistn(leaf_water_sat_fit) leaf_water_sat_density &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_water_sat&quot;) prior_plot(prior = leaf_water_sat_prior, q = c(0,.995), plot_default = leaf_water_sat_density, title = sprintf(&quot;Leaf water content at saturation (leaf_water_sat): %s&quot;, leaf_water_sat_fit$distn), type = &quot;mixed&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). 3.5 leaf_psi_tlp ED variable name : leaf_psi_tlp 3.5.1 Calculation and conversion This one is calculated purely from other parameters: leaf_psi_osmotic and leaf_elastic_mod Remember that leaf_elastic_mod is MPa, where everything else is m! leaf_psi_tlp_samp &lt;- (leaf_psi_osmotic_prior * (leaf_elastic_mod_prior * MPa2m))/ (leaf_psi_osmotic_prior + (leaf_elastic_mod_prior * MPa2m)) summary(leaf_psi_tlp_samp) ## Min. 1st Qu. Median Mean 3rd Qu. ## -366147.8627 -324.7211 -230.5259 -248.7077 -152.8846 ## Max. ## 1077074.4100 # Add in the max an min from the priors table i &lt;- which(priors$ED_name == &quot;leaf_psi_tlp&quot;) prior_in &lt;- priors[i,stats] * MPa2m # Convert from MPa to m prior_in &lt;- prior_add_samp_data(prior_in, samp = -leaf_psi_tlp_samp) prior_in[,stats] ## theor.min low.025 low.25 mean upp.75 upp.975 ## 1 50.98581065 NA 152.8846424 230.5258995 324.7210885 608.8125537 ## theor.max ## 1 611.8297278 myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;leaf_psi_tlp&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_psi_tlp_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000384 already exists. Parameters look the same. Old: lnorm(5.4200, 0.5300) New: lnorm(5.4200, 0.5300)&quot; leaf_psi_tlp_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_psi_tlp_prior_id) %&gt;% collect() leaf_psi_tlp_prior &lt;- -rdistn(leaf_psi_tlp_fit) # Remember to flip back over for psi leaf_psi_tlp_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_psi_tlp&quot;) # plot(density(leaf_psi_tlp_prior), main = &quot;leaf_psi_tlp prior&quot;) # abline(v = get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_psi_tlp&quot;), col = &quot;blue&quot;, lwd = 2) # abline(v = quantile(leaf_psi_osmotic_prior, c(.025, .975)), lty = 2) # legend(&quot;topleft&quot;,legend=c(&quot;Prior&quot;, &quot;95% CI&quot;, &quot;ED PFT 3 Default&quot;), col=c(&quot;black&quot;, &quot;black&quot;,&quot;blue&quot;), lwd = c(2,1,2), lty = c(1,2,1)) prior_plot(prior = leaf_psi_tlp_prior, q = c(.005,1), plot_default = leaf_psi_tlp_default, title = sprintf(&quot;(leaf_psi_tlp): %s&quot;, leaf_psi_tlp_fit$distn), type = &quot;equation&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). Once again the 95% confidence interval is below 0 so I’m ok with using normal even though psi should be negative. 3.6 leaf_water_cap ED variable name : leaf_water_cap 3.6.1 Calculation Calculated entirely from priors leaf_water_cap_samp &lt;- 1000 * (1 - leaf_psi_osmotic_prior / (4 * leaf_psi_tlp_prior)) * (leaf_water_sat_prior / (4 * abs(leaf_psi_tlp_prior))) # * (wdns/leaf_density_prior) leaf_water_cap_samp &lt;- leaf_water_cap_samp[0 &lt; leaf_water_cap_samp] default_leaf_water_cap &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_water_cap&quot;) plot(density(leaf_water_cap_samp)) abline(v = default_leaf_water_cap) # Add in the max an min from the priors table i &lt;- which(priors$ED_name == &quot;leaf_water_cap&quot;) prior_in &lt;- priors[i,stats] prior_in[,&quot;theor.min&quot;] &lt;- NA # prior_in[,&quot;theor.max&quot;] &lt;- max(.35 * (1/MPa2m) * (wdns/leaf_density_prior) ) prior_in &lt;- prior_add_samp_data(prior_in, samp = leaf_water_cap_samp) prior_in[,stats] ## # A tibble: 1 x 7 ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## &lt;lgl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 NA 0.162 0.448 0.747 1.24 3.26 NA # prior_in &lt;- data.frame(theor.min = 1e-10, # # low.025 = quantile(leaf_water_cap_samp, c(.025), na.rm = TRUE), # low.25 = quantile(leaf_water_cap_samp, c(.25), na.rm = TRUE), # mean = quantile(leaf_water_cap_samp, c(.5), na.rm = TRUE), # upp.75 = quantile(leaf_water_cap_samp, c(.75), na.rm = TRUE), # upp.975 = quantile(leaf_water_cap_samp, c(.975), na.rm = TRUE)) myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;leaf_water_cap&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_water_cap_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000405 already exists. Parameters look different. Old: lnorm(-0.3000, 0.7700) New: lnorm(-0.2900, 0.7600)&quot; leaf_water_cap_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_water_cap_prior_id) %&gt;% collect() leaf_water_cap_prior &lt;- rdistn(leaf_water_cap_fit) * (1/1000) leaf_water_cap_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_water_cap&quot;) prior_plot(prior = leaf_water_cap_prior, q = c(0,.975), plot_default = leaf_water_cap_default, title = sprintf(&quot;(leaf_water_cap): %s&quot;, leaf_water_cap_fit$distn), type = &quot;equation&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). 3.7 leaf_psi_min ED variable name : leaf_psi_min 3.7.1 Calculation Should I put rwc_min in the database too? leaf_rwc_min_samp = 0.01 * leaf_elastic_mod_prior + 0.17 leaf_psi_min_samp = (leaf_rwc_min_samp - 1.) * leaf_water_sat_prior / leaf_water_cap_prior # Add in the max an min from the priors table i &lt;- which(priors$ED_name == &quot;leaf_psi_min&quot;) prior_in &lt;- priors[i,stats] * MPa2m # Convert from MPa to m prior_in &lt;- prior_add_samp_data(prior_in, samp = -leaf_psi_min_samp) prior_in[,stats] ## theor.min low.025 low.25 mean upp.75 upp.975 ## 1 10.19716213 101.5281677 391.2989968 783.0725023 1554.677527 5737.739648 ## theor.max ## 1 71380.13491 myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;leaf_psi_min&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) leaf_psi_min_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000392 already exists. Parameters look different. Old: lnorm(6.6500, 1.0200) New: lnorm(6.6600, 1.0200)&quot; leaf_psi_min_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == leaf_psi_min_prior_id) %&gt;% collect() leaf_psi_min_prior &lt;- -rdistn(leaf_psi_min_fit) # Remember to flip psi default_leaf_psi_min &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;leaf_psi_min&quot;) prior_plot(prior = leaf_psi_min_prior, q = c(.025,1), plot_default = default_leaf_psi_min, title = sprintf(&quot;leaf_psi_min: %s&quot;, leaf_psi_min_fit$distn), type = &quot;equation&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). "],
["key-wood-traits.html", "Chapter 4 Key Wood Traits 4.1 Sapwood osmotic water potential at saturation 4.2 Sapwood bulk elastic modulus 4.3 Sapwood water content at saturation 4.4 Sapwood water potential at turgor loss point 4.5 Prior data? 4.6 Wood hydaulic capacitance. 4.7 Sapwood minimum relative water content or Sapwood residual fraction 4.8 Prior data? 4.9 Maximum hydraulic conductivity of the stem 4.10 Water potential at which 50% of stem conductivity is lost 4.11 Exponent for the hydraulic vulnerability curve of stem conductivity", " Chapter 4 Key Wood Traits 4.1 Sapwood osmotic water potential at saturation ED variable name : wood_psi_osmotic ED variable units: m Negative units in BETY so we can fit a distribution! - BETY varaible units: -m 4.1.1 Prior data? FATES varaiable name: pinot_node (stem) FATES variable units: m 4.1.2 Conversion MPa to m i &lt;- which(priors$ED_name == &quot;wood_psi_osmotic&quot;) prior_in &lt;- priors[i, stats] * MPa2m myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) myfit$score$dist[which.min(myfit$score$RMSE)] ## [1] &quot;weibull&quot; variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_psi_osmotic_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000410 already exists. Parameters look the same. Old: weibull(2.4100, 237.4600) New: weibull(2.4100, 237.4600)&quot; wood_psi_osmotic_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_psi_osmotic_prior_id) %&gt;% collect() wood_psi_osmotic_prior &lt;- -rdistn(wood_psi_osmotic_fit) wood_psi_osmotic_default &lt;- get_ED_default(PFT3_defaults_history, &quot;wood_psi_osmotic&quot;) prior_plot(prior = wood_psi_osmotic_prior, q = c(0,1), plot_default = wood_psi_osmotic_default, title = sprintf(&quot;Sapwood osmotic water potential at saturation (wood_psi_osmotic): %s&quot;, wood_psi_osmotic_fit$distn), type = &quot;data&quot;) 4.2 Sapwood bulk elastic modulus ED variable name : wood_elastic_mod ED variable units: MPa Note! This is the only case in which MPa is used instead of m! 4.2.1 Prior data? FATES varaiable name: epsil_node (stem) FATES variable units: MPa 4.2.2 Conversion None! i &lt;- which(priors$ED_name == &quot;wood_elastic_mod&quot;) prior_in &lt;- priors[i,] myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_elastic_mod_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000394 already exists. Parameters look the same. Old: gamma(3.4400, 0.1600) New: gamma(3.4400, 0.1600)&quot; wood_elastic_mod_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_elastic_mod_id) %&gt;% collect() wood_elastic_mod_prior &lt;- rdistn(wood_elastic_mod_fit) wood_elastic_mod_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_elastic_mod&quot;) prior_plot(prior = wood_elastic_mod_prior, q = c(0,1), plot_default = wood_elastic_mod_default, title = sprintf(&quot;wood bulk elastic modulus (wood_elastic_mod): %s&quot;, wood_elastic_mod_fit$distn), type = &quot;data&quot;) 4.3 Sapwood water content at saturation ED variable name: wood_water_sat ED variable units: kg H2O/kg biomass 4.3.1 Prior data? FATES variable name: thetas_node (stem) FATES variable units: kg kg-1 4.3.2 Conversion multiply by the density of water over wood density i &lt;- which(priors$ED_name == &quot;wood_water_sat&quot;) myfit_0 &lt;- prior_get_fit(priors[i,], accepted_dists, plot = FALSE) myfit_0$score$dist[which.min(myfit_0$score$RMSE)] ## [1] &quot;norm&quot; # I&#39;m skipping steps here for the sake of time and sanity # Normal is the best fit wood_water_sat_prior_0 &lt;- rnorm(100000, myfit_0$dists$norm[1], myfit_0$dists$norm[2]) wood_water_sat_sample &lt;- wood_water_sat_prior_0 * (wdns/(wood_density_prior * 1e3)) # Note that here we have to multiply by 1e3 because of the units of wood density # In this case I&#39;m not using the function I built because here it wouldn&#39;t make sense. prior_in &lt;- data.frame(low.025 = quantile(wood_water_sat_sample, c(.025), na.rm = TRUE), low.25 = quantile(wood_water_sat_sample, c(.25), na.rm = TRUE), mean = quantile(wood_water_sat_sample, c(.5), na.rm = TRUE), upp.75 = quantile(wood_water_sat_sample, c(.75), na.rm = TRUE), upp.975 = quantile(wood_water_sat_sample, c(.975), na.rm = TRUE)) myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) ## Warning: Unknown columns: `theor.min`, `theor.max` variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_water_sat_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000415 already exists. Parameters look different. Old: gamma(14.2200, 16.8600) New: gamma(14.2500, 16.9100)&quot; wood_water_sat_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_water_sat_prior_id) %&gt;% collect() wood_water_sat_prior &lt;- rdistn(wood_water_sat_fit) wood_water_sat_density &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_water_sat&quot;) prior_plot(prior = wood_water_sat_prior, q = c(0,.995), plot_default = wood_water_sat_density, title = sprintf(&quot;Wood water content at saturation (wood_water_sat): %s&quot;, wood_water_sat_fit$distn), type = &quot;mixed&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). 4.4 Sapwood water potential at turgor loss point ED variable name: wood_psi_tlp ED variable units: m Negative units in BETY so we can fit a distribution! BETY varaible units: -m 4.5 Prior data? There is a FATES parameter but it is calculated from other parameters FATES variable name: pitlp_node FATES variable units: MPa Constraints we added - wood_psi_tlp &gt; .1 MPa (this was given as a boundary for other psi variables) 4.5.1 Calculation and conversion Calculated from other parameters: wood_psi_osmotic and wood_elastic_mod Remember that wood_elastic_mod is MPa, where everything else is m! wood_psi_tlp_samp = (wood_psi_osmotic_prior * wood_elastic_mod_prior * MPa2m)/ (wood_psi_osmotic_prior + wood_elastic_mod_prior * MPa2m) wood_psi_tlp_samp &lt;- (wood_psi_osmotic_prior * wood_elastic_mod_prior * MPa2m)/ (wood_psi_osmotic_prior + wood_elastic_mod_prior * MPa2m) summary(wood_psi_tlp_samp) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -96340.0496 -326.4427 -231.6364 -255.6691 -153.3114 91193.4211 i &lt;- which(priors$ED_name == &quot;wood_psi_tlp&quot;) prior_in &lt;- priors[i,stats] * MPa2m # Convert from MPa to m prior_in &lt;- prior_add_samp_data(prior_in, samp = -wood_psi_tlp_samp) prior_in[,stats] ## theor.min low.025 low.25 mean upp.75 upp.975 ## 1 10.19716213 50.99325358 153.3114231 231.6364405 326.4427539 613.0681137 ## theor.max ## 1 NA myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;wood_psi_tlp&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_psi_tlp_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000416 already exists. Parameters look different. Old: lnorm(5.4300, 0.5500) New: lnorm(5.4200, 0.5600)&quot; wood_psi_tlp_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_psi_tlp_prior_id) %&gt;% collect() wood_psi_tlp_prior &lt;- -rdistn(wood_psi_tlp_fit) # Remember to flip back over for psi wood_psi_tlp_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_psi_tlp&quot;) # plot(density(wood_psi_tlp_prior), main = &quot;wood_psi_tlp prior&quot;) # abline(v = get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_psi_tlp&quot;), col = &quot;blue&quot;, lwd = 2) # abline(v = quantile(wood_psi_osmotic_prior, c(.025, .975)), lty = 2) # legend(&quot;topleft&quot;,legend=c(&quot;Prior&quot;, &quot;95% CI&quot;, &quot;ED PFT 3 Default&quot;), col=c(&quot;black&quot;, &quot;black&quot;,&quot;blue&quot;), lwd = c(2,1,2), lty = c(1,2,1)) prior_plot(prior = wood_psi_tlp_prior, q = c(.005,1), plot_default = wood_psi_tlp_default, title = sprintf(&quot;(wood_psi_tlp): %s&quot;, wood_psi_tlp_fit$distn), type = &quot;equation&quot;) ## Warning: Removed 500 rows containing non-finite values (stat_density). 4.6 Wood hydaulic capacitance. ED variable name : wood_water_cap ED variable units: kg H2O/kg biomass/m Different units in BETY so we can fit a distribution! The numbers were so small that I couldn’t get the fitting function to work until I scaled the variable up! BETY varaible units: g H2O / kg biomass / m 4.6.1 Prior data? No FATES variables Constraints we added - wood_water_cap &gt; 1e-07 kg H2O/kg biomass/m 4.6.2 Calculation Calculated entirely from priors wood_water_cap_samp &lt;- 1000 * (1 - wood_psi_osmotic_prior / (4 * wood_psi_tlp_prior)) * (wood_water_sat_prior / (4 * abs(wood_psi_tlp_prior))) summary(wood_water_cap_samp) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -53.8044594 0.4473298 0.6280992 0.6858519 0.8701126 4.9677475 i &lt;- which(priors$ED_name == &quot;wood_water_cap&quot;) prior_in &lt;- priors[i,stats] prior_in &lt;- prior_add_samp_data(prior_in, samp = wood_water_cap_samp) prior_in[,stats] ## # A tibble: 1 x 7 ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.0000001 0.186 0.447 0.628 0.870 1.63 NA myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;wood_water_cap&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_water_cap_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000417 already exists. Parameters look different. Old: lnorm(-0.4700, 0.4900) New: lnorm(-0.4700, 0.5000)&quot; wood_water_cap_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_water_cap_prior_id) %&gt;% collect() wood_water_cap_prior &lt;- rdistn(wood_water_cap_fit) * (1/1000) # Convert back to kg wood_water_cap_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_water_cap&quot;) prior_plot(prior = wood_water_cap_prior, q = c(0,.975), plot_default = wood_water_cap_default, title = sprintf(&quot;(wood_water_cap): %s&quot;, wood_water_cap_fit$distn), type = &quot;equation&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). 4.7 Sapwood minimum relative water content or Sapwood residual fraction ED variable name : wood_psi_min Ed variable units: m Negative units in BETY so we can fit a distribution! BETY varaible units: -m 4.8 Prior data? There are no FATES parameters Constraints we added - wood_psi_min &gt; .1 MPa (this was given as a boundary for other psi variables) 4.8.1 Calculation Calculated from other priors. Should I put wood_rwc_min and rwc_tlp_wood in the database too? rwc_tlp_wood_samp &lt;- 1. - (1. - 0.75 * wood_density_prior) / (2.74 + 2.01 * wood_density_prior) wood_rwc_min_samp = wood_elastic_mod_prior * (1. - rwc_tlp_wood_samp) / (wood_psi_osmotic_prior / MPa2m) + 1. wood_psi_min_samp = (wood_rwc_min_samp - 1.) * wood_water_sat_prior / wood_water_cap_prior # Add in the max an min from the priors table i &lt;- which(priors$ED_name == &quot;wood_psi_min&quot;) prior_in &lt;- priors[i,stats] * MPa2m # Convert from MPa to m prior_in &lt;- prior_add_samp_data(prior_in, samp = -wood_psi_min_samp) prior_in[,stats] ## theor.min low.025 low.25 mean upp.75 upp.975 ## 1 10.19716213 215.321589 769.5345388 1484.151209 2876.266012 10864.64962 ## theor.max ## 1 NA myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) variable_id.in &lt;- tbl(bety, &quot;variables&quot;) %&gt;% filter(name == &quot;wood_psi_min&quot;) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_psi_min_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000419 already exists. Parameters look the same. Old: lnorm(7.3000, 0.9800) New: lnorm(7.3000, 0.9800)&quot; wood_psi_min_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_psi_min_prior_id) %&gt;% collect() wood_psi_min_prior &lt;- -rdistn(wood_psi_min_fit) # Remember to flip psi default_wood_psi_min &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_psi_min&quot;) prior_plot(prior = wood_psi_min_prior, q = c(.025,1), plot_default = default_wood_psi_min, title = sprintf(&quot;wood_psi_min: %s&quot;, wood_psi_min_fit$distn), type = &quot;equation&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). 4.9 Maximum hydraulic conductivity of the stem ED variable name : wood_Kmax ED variable units: kg H2O / m / s Note! This is the only case in which MPa is used instead of m! 4.9.1 Prior data? FATES varaiable name: kmax_node FATES variable units: kg m-1 s-1 MPa-1 4.9.2 Conversion I don’t think we need to multiply by the density of water … which is confusing. i &lt;- which(priors$ED_name == &quot;wood_Kmax&quot;) prior_in &lt;- priors[i, stats] / MPa2m myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) myfit$score$dist[which.min(myfit$score$RMSE)] ## [1] &quot;exp&quot; variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_Kmax_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000418 already exists. Parameters look the same. Old: exp(32.6600) New: exp(32.6600)&quot; wood_Kmax_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_Kmax_prior_id) %&gt;% collect() wood_Kmax_prior &lt;- rdistn(wood_Kmax_fit) # NOTE: Need to convert to m from -m wood_Kmax_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_Kmax&quot;) prior_plot(prior = wood_Kmax_prior, q = c(0,.975), plot_default = wood_Kmax_default, title = sprintf(&quot;Maximum hydraulic conductivity of the stem (wood_Kmax): %s&quot;, wood_Kmax_fit$distn), type = &quot;data&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). 4.10 Water potential at which 50% of stem conductivity is lost ED variable name : wood_psi50 ED variable units: m NOTE: There is an ERROR in the ED code for the equation for wood_psi50 Should be: (-1.09-(3.57 * rho(ipft) ^ 1.73) * MPa2m Negative units in BETY so we can fit a distribution! BETY varaible units: -m 4.10.1 Prior data? FATES varaiable name: p50_node (stem) FATES variable units: MPa 4.10.2 Conversion MPa to m This one is tricky, do we keep the normal distribution because it’s the best fit? i &lt;- which(priors$ED_name == &quot;wood_psi50&quot;) prior_in &lt;- priors[i, stats] * MPa2m prior_in ## theor.min low.025 low.25 mean upp.75 upp.975 ## 1 10.19716213 50.98581065 101.9716213 NA 407.8864852 611.8297278 ## theor.max ## 1 NA myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) myfit$score$dist[which.min(myfit$score$RMSE)] ## [1] &quot;norm&quot; variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_psi50_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000360 already exists. Parameters look the same. Old: norm(284.6500, 176.3200) New: norm(284.6500, 176.3200)&quot; wood_psi50_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_psi50_prior_id) %&gt;% collect() wood_psi50_prior &lt;- -rdistn(wood_psi50_fit) # NOTE: Need to convert to m from -m # Calculating default by hand because it is calculated wrong in ED! wood_psi50_default &lt;- (-1.09 - (3.57 * default_wood_density ^ 1.73)) * MPa2m wrong_wood_psi50_default &lt;- get_ED_default(PFT3_defaults_history, &quot;wood_psi50&quot;) p &lt;- prior_plot(prior = wood_psi50_prior, q = c(0,1), plot_default = wood_psi50_default, title = sprintf(&quot;Water potential at which 50perc. of stem cond. is lost (wood_psi50): %s&quot;, wood_psi50_fit$distn), type = &quot;data&quot;) p + geom_vline(aes(xintercept = wrong_wood_psi50_default), color = &quot;gray&quot;, linetype = &quot;dashed&quot;) + geom_vline(aes(xintercept = quantile(wood_psi50_prior, .975)), color = &quot;blue&quot;, linetype = &quot;dashed&quot;) quantile(wood_psi50_prior, .975) ## 97.5% ## 62.62785709 A positive number is within the 95% CI of the distribution so in this case, I’m going to choose a log normal distriburtion even though it is not the best fit. Hopefully this can also be fixed given that we have data for both psi50 and Kexp… best.fit.name &lt;- &quot;lnorm&quot; best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_psi50_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000420 already exists. Parameters look the same. Old: lnorm(5.2800, 0.8500) New: lnorm(5.2800, 0.8500)&quot; wood_psi50_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_psi50_prior_id) %&gt;% collect() wood_psi50_prior &lt;- -rdistn(wood_psi50_fit) # NOTE: Need to convert to m from -m # Calculating default by hand because it is calculated wrong in ED! wood_psi50_default &lt;- (-1.09 - (3.57 * default_wood_density ^ 1.73)) * MPa2m wrong_wood_psi50_default &lt;- get_ED_default(PFT3_defaults_history, &quot;wood_psi50&quot;) prior_plot(prior = wood_psi50_prior, q = c(0.025,1), plot_default = wood_psi50_default, title = sprintf(&quot;Water potential at which 50perc. of stem cond. is lost (wood_psi50): %s&quot;, wood_psi50_fit$distn), type = &quot;data&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). 4.11 Exponent for the hydraulic vulnerability curve of stem conductivity … under the Weibull function 1/(1+(psi/psi50) ^ Kexp_stem) ED variable name : wood_Kexp ED variable units: unitless 4.11.1 Prior data? FATES varaiable name: avuln_node (stem) FATES variable units: unitless 4.11.2 Conversion None! 4.11.3 Calculation i &lt;- which(priors$ED_name == &quot;wood_Kexp&quot;) prior_in &lt;- priors[i, stats] prior_in ## # A tibble: 1 x 7 ## theor.min low.025 low.25 mean upp.75 upp.975 theor.max ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.1 1 10 NA 100 200 NA myfit &lt;- prior_get_fit(prior_in, accepted_dists, plot = TRUE) myfit$score$dist[which.min(myfit$score$RMSE)] ## [1] &quot;exp&quot; variable_id.in &lt;- tbl(bety,&quot;variables&quot;) %&gt;% filter(name == priors$ED_name[i]) %&gt;% pull(id) phylogeny.in &lt;- &quot;plants&quot; best.fit.name &lt;- myfit$score$dist[which.min(myfit$score$RMSE)] best.fit.dat &lt;- myfit$dists %&gt;% select(one_of(&quot;Name&quot;, best.fit.name)) %&gt;% rename(value := !!best.fit.name, params = Name) wood_Kexp_prior_id &lt;- prior_input(bety, variable_id.in, phylogeny.in, dist.name.in = best.fit.name, parama.in = best.fit.dat %&gt;% filter(params == &quot;Para1&quot;) %&gt;% pull(value), paramb.in = best.fit.dat %&gt;% filter(params == &quot;Para2&quot;) %&gt;% pull(value), paramc.in = best.fit.dat %&gt;% filter(params == &quot;Para3&quot;) %&gt;% pull(value)) ## [1] &quot;Entry with id = 1000000421 already exists. Parameters look the same. Old: exp(0.0200) New: exp(0.0200)&quot; wood_Kexp_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_Kexp_prior_id) %&gt;% collect() wood_Kexp_prior &lt;- rdistn(wood_Kexp_fit) # Calculating default by hand because psi50 is calculated wrong in ED! wood_Kexp_default &lt;- 0.544 * 4. * (-wood_psi50_default / MPa2m) ^ (-0.17) wrong_wood_Kexp_default &lt;- get_ED_default(PFT3_defaults_history, &quot;wood_Kexp&quot;) p &lt;- prior_plot(prior = wood_Kexp_prior, q = c(0,.975), plot_default = wood_Kexp_default, title = sprintf(&quot;Water potential at which 50perc. of stem cond. is lost (wood_Kexp): %s&quot;, wood_Kexp_fit$distn), type = &quot;data&quot;) p + geom_vline(aes(xintercept = wrong_wood_Kexp_default), color = &quot;gray&quot;, linetype = &quot;dashed&quot;) ## Warning: Removed 2500 rows containing non-finite values (stat_density). Note: here the miscalculation of psi50 in the code barely shows up because the value is divided by a large number. "],
["comparing-data-to-priors.html", "Chapter 5 Comparing Data to Priors 5.1 Wood Density 5.2 SLA 5.3 Kmax 5.4 Psi50 5.5 Kexp", " Chapter 5 Comparing Data to Priors To do this section, I really should just use the “get trait data” function that is used in pecan because that will show me where/how to deal with the changes in variable units, both for all the psi variables that are negative but also for the variables that are multiplied by 1000. bety &lt;- betyConnect(&quot;/fs/data3/ecowdery/pecan/web/config.php&quot;) pftid &lt;- 1000000132 tropical_species &lt;- tbl(bety, &quot;pfts&quot;) %&gt;% dplyr::rename(pft_id = id) %&gt;% filter(pft_id == pftid) %&gt;% inner_join(., tbl(bety, &quot;pfts_species&quot;), by = &quot;pft_id&quot;) %&gt;% inner_join(., tbl(bety, &quot;species&quot;) %&gt;% dplyr::rename(specie_id = id), by = &quot;specie_id&quot;) %&gt;% dplyr::select(one_of(&quot;pft_id&quot;, &quot;name&quot;, &quot;specie_id&quot;, &quot;genus&quot;, &quot;species&quot;, &quot;scientificname&quot;)) %&gt;% collect() variables &lt;- c( &quot;SLA&quot;, &quot;wood_density&quot;, &quot;leaf_elastic_mod&quot;, &quot;wood_elastic_mod&quot;, &quot;leaf_psi_osmotic&quot;, &quot;wood_psi_osmotic&quot;, &quot;rwc_tlp_wood&quot;, &quot;leaf_water_sat&quot;, &quot;wood_water_sat&quot;, &quot;leaf_water_cap&quot;, &quot;wood_water_cap&quot;, &quot;leaf_psi_min&quot;, &quot;wood_psi_min&quot;, &quot;wood_Kmax&quot;, &quot;wood_psi50&quot;, &quot;wood_Kexp&quot; ) variables_ids &lt;- lapply(variables, function(v) tbl(bety, &quot;variables&quot;) %&gt;% filter(name == v) %&gt;% pull(id)) %&gt;% unlist() v_df &lt;- data.frame(variables, variables_ids) species_ids &lt;- unique(tropical_species$specie_id) trait_data &lt;- tbl(bety, &quot;traits&quot;) %&gt;% filter(specie_id %in% species_ids) %&gt;% filter(variable_id %in% variables_ids) %&gt;% collect() 5.1 Wood Density v_id &lt;- v_df %&gt;% filter(variables == &quot;wood_density&quot;) %&gt;% pull(variables_ids) wood_density_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(variable_id == v_id) %&gt;% filter(id == 1000000281) %&gt;% collect() wood_density_prior &lt;- rdistn(wood_density_fit) wood_density_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;rho&quot;) p &lt;- prior_plot(prior = wood_density_prior, plot_default = wood_density_default, title = sprintf(&quot;(wood_density): %s&quot;, wood_density_fit$distn), type = &quot;prior&quot;) p # obs &lt;- trait_data %&gt;% filter(variable_id == v_df$variables_ids[v_df$variables == &quot;wood_density&quot;]) # p + geom_density(data = obs, aes(x = mean, fill = &quot;obs&quot;), alpha = .3, color = NA) 5.2 SLA v_id &lt;- v_df %&gt;% filter(variables == &quot;SLA&quot;) %&gt;% pull(variables_ids) SLA_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(variable_id == v_id) %&gt;% filter(id == 142) %&gt;% collect() SLA_prior &lt;- rdistn(SLA_fit) SLA_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;SLA&quot;) p &lt;- prior_plot(prior = SLA_prior, plot_default = SLA_default, title = sprintf(&quot;(SLA): %s&quot;, SLA_fit$distn), type = &quot;prior&quot;) obs &lt;- trait_data %&gt;% filter(variable_id == v_df$variables_ids[v_df$variables == &quot;SLA&quot;]) obs$mean &lt;- obs$mean p + geom_density(data = obs, aes(x = mean, fill = &quot;obs&quot;), alpha = .3, color = NA) 5.3 Kmax wood_Kmax_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_Kmax_prior_id) %&gt;% collect() wood_Kmax_prior &lt;- rdistn(wood_Kmax_fit) # NOTE: Need to convert to m from -m wood_Kmax_default &lt;- get_ED_default(&quot;/fs/data3/ecowdery/ED.Hydro/parameters/pft3_defaults_history.xml&quot;, &quot;wood_Kmax&quot;) p &lt;- prior_plot(prior = wood_Kmax_prior, q = c(0,.995), plot_default = wood_Kmax_default, title = sprintf(&quot;Maximum hydraulic conductivity of the stem (wood_Kmax): %s&quot;, wood_Kmax_fit$distn), type = &quot;prior&quot;) obs &lt;- trait_data %&gt;% filter(variable_id == v_df$variables_ids[v_df$variables == &quot;wood_Kmax&quot;]) obs$mean &lt;- obs$mean p + geom_density(data = obs, aes(x = mean, fill = &quot;obs&quot;), alpha = .3, color = NA) ## Warning: Removed 500 rows containing non-finite values (stat_density). 5.4 Psi50 wood_psi50_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_psi50_prior_id) %&gt;% collect() wood_psi50_prior &lt;- -rdistn(wood_psi50_fit) # NOTE: Need to convert to m from -m # Calculating default by hand because it is calculated wrong in ED! wood_psi50_default &lt;- (-1.09 - (3.57 * default_wood_density ^ 1.73)) * MPa2m wrong_wood_psi50_default &lt;- get_ED_default(PFT3_defaults_history, &quot;wood_psi50&quot;) p &lt;- prior_plot(prior = wood_psi50_prior, q = c(0.025,1), plot_default = wood_psi50_default, title = sprintf(&quot;Water potential at which 50perc. of stem cond. is lost (wood_psi50): %s&quot;, wood_psi50_fit$distn), type = &quot;prior&quot;) obs &lt;- trait_data %&gt;% filter(variable_id == v_df$variables_ids[v_df$variables == &quot;wood_psi50&quot;]) obs$mean &lt;- obs$mean p + geom_density(data = obs, aes(x = mean, fill = &quot;obs&quot;), alpha = .3, color = NA) ## Warning: Removed 2500 rows containing non-finite values (stat_density). 5.5 Kexp wood_Kexp_fit &lt;- tbl(bety, &quot;priors&quot;) %&gt;% filter(id == wood_Kexp_prior_id) %&gt;% collect() wood_Kexp_prior &lt;- rdistn(wood_Kexp_fit) # Calculating default by hand because psi50 is calculated wrong in ED! wood_Kexp_default &lt;- 0.544 * 4. * (-wood_psi50_default / MPa2m) ^ (-0.17) wrong_wood_Kexp_default &lt;- get_ED_default(PFT3_defaults_history, &quot;wood_Kexp&quot;) p &lt;- prior_plot(prior = wood_Kexp_prior, q = c(0,.5), plot_default = wood_Kexp_default, title = sprintf(&quot;Water potential at which 50perc. of stem cond. is lost (wood_Kexp): %s&quot;, wood_Kexp_fit$distn), type = &quot;prior&quot;) obs &lt;- trait_data %&gt;% filter(variable_id == v_df$variables_ids[v_df$variables == &quot;wood_Kexp&quot;]) p + geom_density(data = obs, aes(x = mean, fill = &quot;obs&quot;), alpha = .3, color = NA) ## Warning: Removed 50000 rows containing non-finite values (stat_density). "]
]
